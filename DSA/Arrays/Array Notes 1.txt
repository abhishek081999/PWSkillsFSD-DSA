Arrays [countigeous memory allocation] [0,1,2,3,4]
Maximum and Minimum  Element in Arrays
Best time to buy and sell Stock
Maximum Prioduct Subarray
3 Sum
Kth Largest Element in Arrays 

Arrays
[0,1,2,3,4,5], size = 6, Start index = 0 ,  End Index = size-1 : 6-1 = 5,

Properties: 
fixed Size ,
countigeous ,
insert--- End insert O(1)
      --- Index--> arr[6]=10
int arr[] = new int[size];
size of index = last index - 1 +1
End Index = size-1  if 1st index =i, last index=j 
size = j-i+1 = 4-0+1 = 5   [0,1,2,3,4]

Q Best time to buy and sell Stock
You are given an array prices where prices[i] is the price of a given stock on the ith day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

 

Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.
Example 2:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.
 

Constraints:

1 <= prices.length <= 105
0 <= prices[i] <= 104

brut force Approach____===>
for(int i = 0; i<n-1; i++){
    for(int j = i+1;j<1:j++){
        maximum = max(maximum, arr[j]-arr[i])
        return ans
    }
}
O(N^2)---------Optimize it

sorting not answer it

Logic++++++>profit = 0
for(int i = 1; i<n; i++){
    profit = max(profit, arr[i]- min);
    minimum = min(minimum, arr[i]);
    return profit 
}   O(n)


 
 
		
 
	
Question 2


Given an array of size N. The task is to find the maximum and the
minimum element of the array using the minimum number of comparisons.
Examples:
Input: arr[] = {3, 5, 4, 1, 9}
Output: Minimum element is: 1
Maximum element is: 9

TC : O(n)
SC: O(n)
i) Sorting 35419 --->   13459
time O(nlogn)

(arr[0]>arr[1]) max = arr[0] min = arr[1] else max= arr[1]  min = arr[0]
loop = 2 till N
if(arr[i]<min)min = arr[i] if(arr[i]> max) max = arr[i]




ii)
odd min= arr[0]  max = arr[0]
Even prev approach first 2 element

35419  min = 3 max = 3
for (i=1;i<n-1,i++2){
  if(arr[i]>arr[i+1]){
    if(arr[i]>max)
    max = arr[i]
  }
  else if(arr[i+1]<min){
    min=arr[i+1]
  }
}

if(arr[i]<=arr[i+1]){
  if(arr[i+1]>max){
    max= arr[i+1]
  }
  else if(arr[i]<min){
    min = arr[i]
  }
}



Question 3

// Given an integer array nums, find a subarray that has the largest product,
// and return the product.
// The test cases are generated so that the answer will fit in a 32-bit integer.
// Example:
// Input: nums = [2,3,-2,4]
// Output: 6
// Explanation: [2,3] has the largest product 6.

1)brutforce approach(n^2)
Single loop O(N) Kadanes Algo  ___Max subarray sum


Question 4 
3 sum Problem
i) 3 loops O(n^3)
for(i=0;i<n-2;i++){
  for(j=i+1;j<n-i;j++){
    for(k=j+1:k<n;k++){
      if(arr[i]+arr[j]+arr[k]==0)
    }
  }
}